// This file was generated by counterfeiter
package uifakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/diego-enabler/ui"
)

type FakeApplicationPrinter struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	OrganizationStub        func() string
	organizationMutex       sync.RWMutex
	organizationArgsForCall []struct{}
	organizationReturns     struct {
		result1 string
	}
	SpaceStub        func() string
	spaceMutex       sync.RWMutex
	spaceArgsForCall []struct{}
	spaceReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApplicationPrinter) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *FakeApplicationPrinter) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeApplicationPrinter) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicationPrinter) Organization() string {
	fake.organizationMutex.Lock()
	fake.organizationArgsForCall = append(fake.organizationArgsForCall, struct{}{})
	fake.recordInvocation("Organization", []interface{}{})
	fake.organizationMutex.Unlock()
	if fake.OrganizationStub != nil {
		return fake.OrganizationStub()
	} else {
		return fake.organizationReturns.result1
	}
}

func (fake *FakeApplicationPrinter) OrganizationCallCount() int {
	fake.organizationMutex.RLock()
	defer fake.organizationMutex.RUnlock()
	return len(fake.organizationArgsForCall)
}

func (fake *FakeApplicationPrinter) OrganizationReturns(result1 string) {
	fake.OrganizationStub = nil
	fake.organizationReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicationPrinter) Space() string {
	fake.spaceMutex.Lock()
	fake.spaceArgsForCall = append(fake.spaceArgsForCall, struct{}{})
	fake.recordInvocation("Space", []interface{}{})
	fake.spaceMutex.Unlock()
	if fake.SpaceStub != nil {
		return fake.SpaceStub()
	} else {
		return fake.spaceReturns.result1
	}
}

func (fake *FakeApplicationPrinter) SpaceCallCount() int {
	fake.spaceMutex.RLock()
	defer fake.spaceMutex.RUnlock()
	return len(fake.spaceArgsForCall)
}

func (fake *FakeApplicationPrinter) SpaceReturns(result1 string) {
	fake.SpaceStub = nil
	fake.spaceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicationPrinter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.organizationMutex.RLock()
	defer fake.organizationMutex.RUnlock()
	fake.spaceMutex.RLock()
	defer fake.spaceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeApplicationPrinter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.ApplicationPrinter = new(FakeApplicationPrinter)

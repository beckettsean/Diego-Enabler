// This file was generated by counterfeiter
package migratehelpersfakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/diego-enabler/commands/migratehelpers"
)

type FakeDiegoFlagSetter struct {
	SetDiegoFlagStub        func(string, bool) ([]string, error)
	setDiegoFlagMutex       sync.RWMutex
	setDiegoFlagArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	setDiegoFlagReturns struct {
		result1 []string
		result2 error
	}
	WarnNoRoutesStub        func(appName string, output io.Writer) error
	warnNoRoutesMutex       sync.RWMutex
	warnNoRoutesArgsForCall []struct {
		appName string
		output  io.Writer
	}
	warnNoRoutesReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiegoFlagSetter) SetDiegoFlag(arg1 string, arg2 bool) ([]string, error) {
	fake.setDiegoFlagMutex.Lock()
	fake.setDiegoFlagArgsForCall = append(fake.setDiegoFlagArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("SetDiegoFlag", []interface{}{arg1, arg2})
	fake.setDiegoFlagMutex.Unlock()
	if fake.SetDiegoFlagStub != nil {
		return fake.SetDiegoFlagStub(arg1, arg2)
	} else {
		return fake.setDiegoFlagReturns.result1, fake.setDiegoFlagReturns.result2
	}
}

func (fake *FakeDiegoFlagSetter) SetDiegoFlagCallCount() int {
	fake.setDiegoFlagMutex.RLock()
	defer fake.setDiegoFlagMutex.RUnlock()
	return len(fake.setDiegoFlagArgsForCall)
}

func (fake *FakeDiegoFlagSetter) SetDiegoFlagArgsForCall(i int) (string, bool) {
	fake.setDiegoFlagMutex.RLock()
	defer fake.setDiegoFlagMutex.RUnlock()
	return fake.setDiegoFlagArgsForCall[i].arg1, fake.setDiegoFlagArgsForCall[i].arg2
}

func (fake *FakeDiegoFlagSetter) SetDiegoFlagReturns(result1 []string, result2 error) {
	fake.SetDiegoFlagStub = nil
	fake.setDiegoFlagReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDiegoFlagSetter) WarnNoRoutes(appName string, output io.Writer) error {
	fake.warnNoRoutesMutex.Lock()
	fake.warnNoRoutesArgsForCall = append(fake.warnNoRoutesArgsForCall, struct {
		appName string
		output  io.Writer
	}{appName, output})
	fake.recordInvocation("WarnNoRoutes", []interface{}{appName, output})
	fake.warnNoRoutesMutex.Unlock()
	if fake.WarnNoRoutesStub != nil {
		return fake.WarnNoRoutesStub(appName, output)
	} else {
		return fake.warnNoRoutesReturns.result1
	}
}

func (fake *FakeDiegoFlagSetter) WarnNoRoutesCallCount() int {
	fake.warnNoRoutesMutex.RLock()
	defer fake.warnNoRoutesMutex.RUnlock()
	return len(fake.warnNoRoutesArgsForCall)
}

func (fake *FakeDiegoFlagSetter) WarnNoRoutesArgsForCall(i int) (string, io.Writer) {
	fake.warnNoRoutesMutex.RLock()
	defer fake.warnNoRoutesMutex.RUnlock()
	return fake.warnNoRoutesArgsForCall[i].appName, fake.warnNoRoutesArgsForCall[i].output
}

func (fake *FakeDiegoFlagSetter) WarnNoRoutesReturns(result1 error) {
	fake.WarnNoRoutesStub = nil
	fake.warnNoRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDiegoFlagSetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setDiegoFlagMutex.RLock()
	defer fake.setDiegoFlagMutex.RUnlock()
	fake.warnNoRoutesMutex.RLock()
	defer fake.warnNoRoutesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDiegoFlagSetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migratehelpers.DiegoFlagSetter = new(FakeDiegoFlagSetter)
